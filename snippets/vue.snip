include web.snip

snippet component
alias comp
options head
	<template>
		<div class="$1">$1 Template</div>
	</template>

	<script lang="ts">
	import { Component, Vue } from 'vue-property-decorator'

	@Component
	export default class ${1} extends Vue {
	}
	</script>

	<style lang="scss">
	.$1 {

	}
	</style>

snippet componentWindow
alias compWin
options head
	<!--
		Путь: путь к окну в интерфейсе
	-->
	<template>
		<div class="$1">$1 Template</div>
	</template>

	<script lang="ts">
	import { Component, Vue } from 'vue-property-decorator'

	/** Параметры компонента. */
	export interface ComponentOptions {
		groupName: string
	}

	@Component({
		layout: ['dialog', { title: 'Window Title', top: 0, left: 0, width: 600, resizable: true }],
	})
	export default class ${1} extends Vue implements ComponentOptions {
		/* --- PROPS --- */

		/** Группа окон, в которую входит это окно */
		@StrictPropRequired<ComponentOptions['groupName']>({ type: String })
		public declare readonly groupName: ComponentOptions['groupName']
	}
	</script>

	<style lang="scss">
	.$1 {

	}
	</style>

snippet componentWindowMode
alias compWinMode
options head
	<!--
		Путь: путь к окну в интерфейсе
	-->
	<template>
		<div class="$1">$1 Template</div>
	</template>

	<script lang="ts">
	import { Component, Vue } from 'vue-property-decorator'

	import { WindowMode } from '@/typings'
	import { StrictPropRequired } from '@/decorators'

	/** Параметры компонента. */
	export interface ComponentOptions {
		groupName: string
		mode: WindowMode
	}

	@Component({
		layout: ['dialog', { title: 'Window Title', top: 0, left: 0, width: 600, resizable: true }],
	})
	export default class ${1} extends Vue implements ComponentOptions {
		/* --- PROPS --- */

		/** Группа окон, в которую входит это окно */
		@StrictPropRequired<ComponentOptions['groupName']>({ type: String })
		public declare readonly groupName: ComponentOptions['groupName']

		/** Режим окна при открытии */
		@StrictPropRequired<ComponentOptions['mode']>({
			type: Number,
			validator: (value) => Object.values(WindowMode).includes(Number(value)),
		})
		public declare readonly mode: ComponentOptions['mode']

		/* --- DATA --- */

		/** Текущий режим. Может меняться из WindowMode.View в WindowMode.Edit */
		private curMode = WindowMode.View

		/* --- HOOKS --- */

		private created() {
			if (Object.values(WindowMode).includes(Number(this.mode))) {
				this.curMode = this.mode
			} else {
				// Ошибка уже в консоли, т.к. инициирована валидацией параметра "mode"
				this.curMode = WindowMode.View
			}
		}
	}
	</script>

	<style lang="scss">
	.$1 {

	}
	</style>

snippet apollo-smart-query
alias asq
options head
	@SmartQuery<${1:#:class}, ${2:#:resultType}, ${3:#:prefix}QueryVariables, $3Query>({
		client: '${4}',
		query: $3Document,
		fetchPolicy: '${5}',
		update({ ${6} }) {
			// begin #########################################
			console.log($6)
			// end ###########################################
			return $8
		},
		error(err) {
			showMessage(this, \`Ошибка запроса "$3Document": ${err}\`, { type: 'dialog', severity: 'error' })
		},
	})
	private readonly ${7}: $2 = ${8:#:nullValue}

snippet apollo-query
alias aq
options head
	try {
		const { data } = await this.$apollo.query<${1:#:query}, ${2:#:queryArgs}>({
			client: '${3}',
			query: ${4},
			fetchPolicy: '${5}',
			variables: {},
		})
		// begin #########################################
		console.log(data)
		// end ###########################################
	} catch(err) {
		showMessage(this, \`Ошибка запроса "$4": ${err}\`, { type: 'dialog', severity: 'error' })
	}

snippet apollo-query-document
alias aqd
options head
	try {
		const { data } = await this.$apollo.query<${1:#:prefix}Query, $1QueryVariables>({
			client: '${2}',
			query: $1Document,
			fetchPolicy: '${3}',
			variables: {},
		})
		// begin #########################################
		console.log(data)
		// end ###########################################
	} catch(err) {
		showMessage(this, \`Ошибка запроса "$1Document": ${err}\`, { type: 'dialog', severity: 'error' })
	}

snippet apollo-mutation
alias am
options head
	try {
		const { data } = await this.$apollo.mutate<${1:#:prefix}Mutation, $1MutationVariables>({
			client: '${2}',
			fetchPolicy: 'no-cache',
			mutation: $1Document,
			variables: {},
		})
		// begin #########################################
		console.log(data)
		// end ###########################################
	} catch(err) {
		showMessage(this, \`Ошибка мутации "$1Document": ${err}\`, { type: 'dialog', severity: 'error' })
	}

snippet apollo-error
alias ae
options head
	error(err) {
		showMessage(this, \`Ошибка запроса "${0}": ${err}\`, { type: 'dialog', severity: 'error' })
	},

snippet apollo-return-nodes
alias arn
options head
	return (${1:#:query}?.edges ?? []).reduce<${2:#:resultType}>((nodes, edge) => {
		const node = edge?.node
		if (node) {
			nodes.push(node)
		}
		return nodes
	}, [])

snippet vuetify-theme-isDark
alias vtd
options word
	$vuetify.theme.isDark ? 'theme--dark' : 'theme--light'

snippet class-vuetify-theme-isDark
alias cvtd
options word
	:class="$vuetify.theme.isDark ? 'theme--dark' : 'theme--light'"
